name: CI Pipeline
on: [push]

jobs:
  lint:
    name: Lint with Ruff
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linting
        run: ruff check .

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install safety pip-audit

      - name: Check for security vulnerabilities
        run: |
          pip list
          pip-audit --ignore-vuln "GHSA-2qrg-x229-3v8q" -r requirements.txt

      - name: Check vulnerable package versions
        run: |
          pip list --outdated --format=columns | tee outdated.txt
          if grep -q 'setuptools' outdated.txt; then
            echo "::warning::Outdated setuptools found"
          fi

  dependencies:
    name: Dependency Management
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Validate requirements.txt
        run: |
          if [ ! -f requirements.txt ]; then
            echo "::error::requirements.txt file not found!"
            exit 1
          fi
          grep -E '^[^#]+' requirements.txt | while read line; do
            package=$(echo $line | cut -d'=' -f1 | tr -d '[:space:]')
            if [ -z "$package" ]; then continue; fi
            if ! pip install --dry-run $package > /dev/null 2>&1; then
              echo "::error::Invalid package: $package"
              exit 1
            fi
          done

      - name: Check dependency consistency
        run: |
          pip install pipdeptree
          pipdeptree --warn fail > /dev/null