# Generated by Django 5.2.3 on 2025-06-25 08:34

import django.core.validators
import django.db.models.deletion
import simple_history.models
import taggit.managers
import task.models.validations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalSpace",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "space_name",
                    models.CharField(
                        db_index=True,
                        help_text="Enter the name of the space",
                        max_length=255,
                        verbose_name="Space Name",
                    ),
                ),
                (
                    "space_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the space",
                        null=True,
                        verbose_name="Space Settings",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The date and time when the space was created",
                        verbose_name="Created At",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical space",
                "verbose_name_plural": "historical spaces",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Space",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "space_name",
                    models.CharField(
                        help_text="Enter the name of the space",
                        max_length=255,
                        unique=True,
                        verbose_name="Space Name",
                    ),
                ),
                (
                    "space_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the space",
                        null=True,
                        verbose_name="Space Settings",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time when the space was created",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "space_users",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users who belong to this space",
                        related_name="spaces",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Space Users",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "location_name",
                    models.CharField(
                        help_text="Enter the name of the location",
                        max_length=255,
                        unique=True,
                        verbose_name="Location Name",
                    ),
                ),
                (
                    "location_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the location",
                        verbose_name="Location Description",
                    ),
                ),
                (
                    "location_address",
                    models.CharField(
                        blank=True,
                        help_text="Physical address of the location",
                        max_length=512,
                        verbose_name="Location Address",
                    ),
                ),
                (
                    "location_space",
                    models.ForeignKey(
                        help_text="sapce",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_title",
                    models.CharField(
                        help_text="Enter the title or name of the link",
                        max_length=255,
                        unique=True,
                        verbose_name="Link Title",
                    ),
                ),
                (
                    "link_description",
                    models.TextField(
                        blank=True,
                        help_text="Description or notes about the link",
                        verbose_name="Link Description",
                    ),
                ),
                (
                    "link_url",
                    models.URLField(
                        help_text="URL address of the material",
                        unique=True,
                        verbose_name="URL",
                    ),
                ),
                (
                    "link_space",
                    models.ForeignKey(
                        help_text="sapce",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalStatus",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "status_name",
                    models.CharField(
                        db_index=True,
                        help_text="Enter the name of the task status",
                        max_length=100,
                        verbose_name="Status Name",
                    ),
                ),
                (
                    "status_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the status",
                        verbose_name="Status Description",
                    ),
                ),
                (
                    "status_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the status",
                        null=True,
                        validators=[task.models.validations.validate_status_settings],
                        verbose_name="Status Settings",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "status_space",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="sapce",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical status",
                "verbose_name_plural": "historical statuss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLocation",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "location_name",
                    models.CharField(
                        db_index=True,
                        help_text="Enter the name of the location",
                        max_length=255,
                        verbose_name="Location Name",
                    ),
                ),
                (
                    "location_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the location",
                        verbose_name="Location Description",
                    ),
                ),
                (
                    "location_address",
                    models.CharField(
                        blank=True,
                        help_text="Physical address of the location",
                        max_length=512,
                        verbose_name="Location Address",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location_space",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="sapce",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical location",
                "verbose_name_plural": "historical locations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLink",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "link_title",
                    models.CharField(
                        db_index=True,
                        help_text="Enter the title or name of the link",
                        max_length=255,
                        verbose_name="Link Title",
                    ),
                ),
                (
                    "link_description",
                    models.TextField(
                        blank=True,
                        help_text="Description or notes about the link",
                        verbose_name="Link Description",
                    ),
                ),
                (
                    "link_url",
                    models.URLField(
                        db_index=True,
                        help_text="URL address of the material",
                        verbose_name="URL",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "link_space",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="sapce",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical link",
                "verbose_name_plural": "historical links",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalFile",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "file_name",
                    models.CharField(
                        db_index=True,
                        help_text="Enter the name of the file",
                        max_length=255,
                        verbose_name="File Name",
                    ),
                ),
                (
                    "file_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the file",
                        verbose_name="File Description",
                    ),
                ),
                (
                    "file_upload",
                    models.TextField(
                        help_text="Upload the document file",
                        max_length=100,
                        verbose_name="File Upload",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "file_space",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="sapce",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical file",
                "verbose_name_plural": "historical files",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCategory",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "category_name",
                    models.CharField(
                        db_index=True,
                        help_text="Enter the name of the category",
                        max_length=255,
                        verbose_name="Category Name",
                    ),
                ),
                (
                    "category_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the category",
                        verbose_name="Category Description",
                    ),
                ),
                (
                    "category_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the category",
                        null=True,
                        verbose_name="Category Settings",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category_space",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="sapce",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical category",
                "verbose_name_plural": "historical categorys",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file_name",
                    models.CharField(
                        help_text="Enter the name of the file",
                        max_length=255,
                        unique=True,
                        verbose_name="File Name",
                    ),
                ),
                (
                    "file_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the file",
                        verbose_name="File Description",
                    ),
                ),
                (
                    "file_upload",
                    models.FileField(
                        help_text="Upload the document file",
                        upload_to="uploads/files/",
                        verbose_name="File Upload",
                    ),
                ),
                (
                    "file_space",
                    models.ForeignKey(
                        help_text="sapce",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category_name",
                    models.CharField(
                        help_text="Enter the name of the category",
                        max_length=255,
                        unique=True,
                        verbose_name="Category Name",
                    ),
                ),
                (
                    "category_description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the category",
                        verbose_name="Category Description",
                    ),
                ),
                (
                    "category_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the category",
                        null=True,
                        verbose_name="Category Settings",
                    ),
                ),
                (
                    "category_space",
                    models.ForeignKey(
                        help_text="sapce",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status_name",
                    models.CharField(
                        help_text="Enter the name of the task status",
                        max_length=100,
                        unique=True,
                        verbose_name="Status Name",
                    ),
                ),
                (
                    "status_description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the status",
                        verbose_name="Status Description",
                    ),
                ),
                (
                    "status_settings",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON configuration for the status",
                        null=True,
                        validators=[task.models.validations.validate_status_settings],
                        verbose_name="Status Settings",
                    ),
                ),
                (
                    "status_space",
                    models.ForeignKey(
                        help_text="sapce",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalTask",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "task_name",
                    models.CharField(
                        db_index=True,
                        help_text="Task name (max 200 characters)",
                        max_length=200,
                        verbose_name="Task Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed task description with formatting support",
                        verbose_name="Description",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        help_text="Priority on a 10-point scale (1=lowest, 10=highest)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0,
                        help_text="Completion percentage (0-100%)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Progress",
                    ),
                ),
                (
                    "progress_dependencies",
                    models.IntegerField(
                        default=0,
                        help_text="Dependencies completion percentage (0-100%)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Dependencies Progress",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        help_text="Automatically set on task creation",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Automatically updated on save",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Planned start date/time",
                        null=True,
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Planned completion date/time",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Task deadline",
                        null=True,
                        verbose_name="Deadline",
                    ),
                ),
                (
                    "complexity",
                    models.IntegerField(
                        default=5,
                        help_text="Complexity rating (1-10)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Complexity",
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="low",
                        help_text="Task execution risk assessment",
                        max_length=10,
                        verbose_name="Risk Level",
                    ),
                ),
                (
                    "is_ready",
                    models.BooleanField(
                        default=False,
                        help_text="Ready for execution (all dependencies completed)",
                        verbose_name="Ready",
                    ),
                ),
                (
                    "is_recurring",
                    models.BooleanField(
                        default=False,
                        help_text="Recurring task (e.g., daily)",
                        verbose_name="Recurring",
                    ),
                ),
                (
                    "needs_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Requires manager approval upon completion",
                        verbose_name="Requires Approval",
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Use as template for new tasks",
                        verbose_name="Template",
                    ),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Planned execution duration in minutes",
                        null=True,
                        verbose_name="Estimated Duration",
                    ),
                ),
                (
                    "actual_duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Actual time spent in minutes",
                        null=True,
                        verbose_name="Actual Duration",
                    ),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Quality rating (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Quality Rating",
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Allocated budget in system currency",
                        max_digits=10,
                        null=True,
                        verbose_name="Budget",
                    ),
                ),
                (
                    "cancel_reason",
                    models.TextField(
                        blank=True,
                        help_text="Cancellation reason (required for 'canceled' status)",
                        verbose_name="Cancel Reason",
                    ),
                ),
                (
                    "time_intervals",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Execution time ranges in JSON format",
                        null=True,
                        validators=[task.models.validations.validate_time_intervals],
                        verbose_name="Time Intervals",
                    ),
                ),
                (
                    "reminders",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Reminders in [{'time': datetime, 'method': id}] format",
                        null=True,
                        validators=[task.models.validations.validate_reminders],
                        verbose_name="Reminders",
                    ),
                ),
                (
                    "repeat_interval",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Recurrence interval (for recurring tasks)",
                        null=True,
                        verbose_name="Repeat Interval",
                    ),
                ),
                (
                    "next_activation",
                    models.DateTimeField(
                        blank=True,
                        help_text="Next execution date (for recurring tasks)",
                        null=True,
                        verbose_name="Next Activation",
                    ),
                ),
                (
                    "notifications",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Task event notification methods",
                        validators=[task.models.validations.validate_notifications],
                        verbose_name="Notification Methods",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Primary task executor",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assignee",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Task creator",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Author",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Last user who modified the task",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Editor",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Physical task location",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.location",
                        verbose_name="Location",
                    ),
                ),
                (
                    "task_space",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="sapce",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Current task status",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.status",
                        verbose_name="Status",
                    ),
                ),
            ],
            options={
                "verbose_name": "Change History",
                "verbose_name_plural": "historical tasks",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "task_name",
                    models.CharField(
                        db_index=True,
                        help_text="Task name (max 200 characters)",
                        max_length=200,
                        verbose_name="Task Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed task description with formatting support",
                        verbose_name="Description",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        help_text="Priority on a 10-point scale (1=lowest, 10=highest)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Priority",
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0,
                        help_text="Completion percentage (0-100%)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Progress",
                    ),
                ),
                (
                    "progress_dependencies",
                    models.IntegerField(
                        default=0,
                        help_text="Dependencies completion percentage (0-100%)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Dependencies Progress",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Automatically set on task creation",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Automatically updated on save",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Planned start date/time",
                        null=True,
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Planned completion date/time",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Task deadline",
                        null=True,
                        verbose_name="Deadline",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Automatically set on soft deletion",
                        null=True,
                        verbose_name="Deleted At",
                    ),
                ),
                (
                    "complexity",
                    models.IntegerField(
                        default=5,
                        help_text="Complexity rating (1-10)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Complexity",
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="low",
                        help_text="Task execution risk assessment",
                        max_length=10,
                        verbose_name="Risk Level",
                    ),
                ),
                (
                    "is_ready",
                    models.BooleanField(
                        default=False,
                        help_text="Ready for execution (all dependencies completed)",
                        verbose_name="Ready",
                    ),
                ),
                (
                    "is_recurring",
                    models.BooleanField(
                        default=False,
                        help_text="Recurring task (e.g., daily)",
                        verbose_name="Recurring",
                    ),
                ),
                (
                    "needs_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Requires manager approval upon completion",
                        verbose_name="Requires Approval",
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Use as template for new tasks",
                        verbose_name="Template",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        editable=False,
                        help_text="Soft deletion flag",
                        verbose_name="Deleted",
                    ),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Planned execution duration in minutes",
                        null=True,
                        verbose_name="Estimated Duration",
                    ),
                ),
                (
                    "actual_duration",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Actual time spent in minutes",
                        null=True,
                        verbose_name="Actual Duration",
                    ),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Quality rating (1-5 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Quality Rating",
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Allocated budget in system currency",
                        max_digits=10,
                        null=True,
                        verbose_name="Budget",
                    ),
                ),
                (
                    "cancel_reason",
                    models.TextField(
                        blank=True,
                        help_text="Cancellation reason (required for 'canceled' status)",
                        verbose_name="Cancel Reason",
                    ),
                ),
                (
                    "time_intervals",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Execution time ranges in JSON format",
                        null=True,
                        validators=[task.models.validations.validate_time_intervals],
                        verbose_name="Time Intervals",
                    ),
                ),
                (
                    "reminders",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Reminders in [{'time': datetime, 'method': id}] format",
                        null=True,
                        validators=[task.models.validations.validate_reminders],
                        verbose_name="Reminders",
                    ),
                ),
                (
                    "repeat_interval",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Recurrence interval (for recurring tasks)",
                        null=True,
                        verbose_name="Repeat Interval",
                    ),
                ),
                (
                    "next_activation",
                    models.DateTimeField(
                        blank=True,
                        help_text="Next execution date (for recurring tasks)",
                        null=True,
                        verbose_name="Next Activation",
                    ),
                ),
                (
                    "notifications",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Task event notification methods",
                        validators=[task.models.validations.validate_notifications],
                        verbose_name="Notification Methods",
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        help_text="Primary task executor",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assignee",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="Task creator",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Author",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Task categories",
                        related_name="tasks",
                        to="task.category",
                        verbose_name="Categories",
                    ),
                ),
                (
                    "dependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tasks that must be completed BEFORE this one",
                        related_name="dependent_tasks",
                        to="task.task",
                        verbose_name="Dependencies",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Last user who modified the task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="edited_tasks",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Last Editor",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Physical task location",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="task.location",
                        verbose_name="Location",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current task status",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="task.status",
                        verbose_name="Status",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="Tagging system for task categorization",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "task_space",
                    models.ForeignKey(
                        help_text="sapce",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.space",
                        verbose_name="space",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalTaskLink",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the link in the context of the task",
                        verbose_name="Link Description",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="task.task",
                        verbose_name="Task",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical task link",
                "verbose_name_plural": "historical task links",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="TaskLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the link in the context of the task",
                        verbose_name="Link Description",
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_links",
                        to="task.link",
                        verbose_name="Link",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="task_links",
                        to="task.task",
                        verbose_name="Task",
                    ),
                ),
            ],
            options={
                "unique_together": {("task", "link")},
            },
        ),
        migrations.AddField(
            model_name="task",
            name="links",
            field=models.ManyToManyField(
                blank=True,
                help_text="Related external resources and documents",
                through="task.TaskLink",
                to="task.link",
                verbose_name="Links",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["is_ready"], name="task_task_is_read_c0d529_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(fields=["status"], name="task_task_status__b93377_idx"),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["assignee"], name="task_task_assigne_8f7780_idx"
            ),
        ),
    ]
